


ARM Macro Assembler    Page 1 


    1 00000000         ;
    2 00000000         ;*******************************************************
                       *************************************************
    3 00000000         ;                                                uC/OS-I
                       I
    4 00000000         ;                                          The Real-Time
                        Kernel
    5 00000000         ;
    6 00000000         ;
    7 00000000         ;                              (c) Copyright 2010; Micri
                       um, Inc.; Weston, FL
    8 00000000         ;                    All rights reserved.  Protected by 
                       international copyright laws.
    9 00000000         ;
   10 00000000         ;                                           ARM Cortex-M
                       4 Port
   11 00000000         ;
   12 00000000         ; File      : OS_CPU_A.ASM
   13 00000000         ; Version   : V2.92
   14 00000000         ; By        : JJL
   15 00000000         ;             BAN
   16 00000000         ;
   17 00000000         ; For       : ARMv7 Cortex-M4
   18 00000000         ; Mode      : Thumb-2 ISA
   19 00000000         ; Toolchain : RealView Development Suite
   20 00000000         ;             RealView Microcontroller Development Kit (
                       MDK)
   21 00000000         ;             ARM Developer Suite (ADS)
   22 00000000         ;             Keil uVision
   23 00000000         ;*******************************************************
                       *************************************************
   24 00000000         ;
   25 00000000         
   26 00000000         ;*******************************************************
                       *************************************************
   27 00000000         ;                                          PUBLIC FUNCTI
                       ONS
   28 00000000         ;*******************************************************
                       *************************************************
   29 00000000         
   30 00000000                 EXTERN           OSRunning   ; External referenc
                                                            es
   31 00000000                 EXTERN           OSPrioCur
   32 00000000                 EXTERN           OSPrioHighRdy
   33 00000000                 EXTERN           OSTCBCur
   34 00000000                 EXTERN           OSTCBHighRdy
   35 00000000                 EXTERN           OSIntExit
   36 00000000                 EXTERN           OSTaskSwHook
   37 00000000                 EXTERN           OS_CPU_ExceptStkBase
   38 00000000         
   39 00000000                 EXPORT           OS_CPU_SR_Save ; Functions decl
                                                            ared in this file
   40 00000000                 EXPORT           OS_CPU_SR_Restore
   41 00000000                 EXPORT           OSStartHighRdy
   42 00000000                 EXPORT           OSCtxSw
   43 00000000                 EXPORT           OSIntCtxSw
   44 00000000                 EXPORT           PendSV_Handler
   45 00000000                 EXPORT           CPU_IntDis
   46 00000000                 EXPORT           CPU_IntEn



ARM Macro Assembler    Page 2 


   47 00000000         ;PAGE
   48 00000000         ;*******************************************************
                       *************************************************
   49 00000000         ;                                               EQUATES
   50 00000000         ;*******************************************************
                       *************************************************
   51 00000000         
   52 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; Interrupt control
                                                             state register.
   53 00000000 E000ED22 
                       NVIC_SYSPRI14
                               EQU              0xE000ED22  ; System priority r
                                                            egister (priority 1
                                                            4).
   54 00000000 000000FF 
                       NVIC_PENDSV_PRI
                               EQU              0xFF        ; PendSV priority v
                                                            alue (lowest).
   55 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; Value to trigger 
                                                            PendSV exception.
   56 00000000         
   57 00000000         
   58 00000000         ;*******************************************************
                       *************************************************
   59 00000000         ;                                     CODE GENERATION DI
                       RECTIVES
   60 00000000         ;*******************************************************
                       *************************************************
   61 00000000         
   62 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   63 00000000                 THUMB
   64 00000000                 REQUIRE8
   65 00000000                 PRESERVE8
   66 00000000         
   67 00000000         ;*******************************************************
                       *************************************************
   68 00000000         ;                                   CRITICAL SECTION MET
                       HOD 3 FUNCTIONS
   69 00000000         ;
   70 00000000         ; Description: Disable/Enable interrupts by preserving t
                       he state of interrupts.  Generally speaking you
   71 00000000         ;              would store the state of the interrupt di
                       sable flag in the local variable 'cpu_sr' and then
   72 00000000         ;              disable interrupts.  'cpu_sr' is allocate
                       d in all of uC/OS-II's functions that need to
   73 00000000         ;              disable interrupts.  You would restore th
                       e interrupt disable state by copying back 'cpu_sr'
   74 00000000         ;              into the CPU's status register.
   75 00000000         ;
   76 00000000         ; Prototypes :     OS_CPU_SR  OS_CPU_SR_Save(void);
   77 00000000         ;                  void       OS_CPU_SR_Restore(OS_CPU_S
                       R cpu_sr);
   78 00000000         ;
   79 00000000         ;



ARM Macro Assembler    Page 3 


   80 00000000         ; Note(s)    : 1) These functions are used in general li
                       ke this:
   81 00000000         ;
   82 00000000         ;                 void Task (void *p_arg)
   83 00000000         ;                 {
   84 00000000         ;                 #if OS_CRITICAL_METHOD == 3          /
                       * Allocate storage for CPU status register */
   85 00000000         ;                     OS_CPU_SR  cpu_sr;
   86 00000000         ;                 #endif
   87 00000000         ;
   88 00000000         ;                          :
   89 00000000         ;                          :
   90 00000000         ;                     OS_ENTER_CRITICAL();             /
                       * cpu_sr = OS_CPU_SaveSR();                */
   91 00000000         ;                          :
   92 00000000         ;                          :
   93 00000000         ;                     OS_EXIT_CRITICAL();              /
                       * OS_CPU_RestoreSR(cpu_sr);                */
   94 00000000         ;                          :
   95 00000000         ;                          :
   96 00000000         ;                 }
   97 00000000         ;*******************************************************
                       *************************************************
   98 00000000         
   99 00000000         OS_CPU_SR_Save
  100 00000000 F3EF 8010       MRS              R0, PRIMASK ; Set prio int mask
                                                             to mask all (excep
                                                            t faults)
  101 00000004 B672            CPSID            I
  102 00000006 4770            BX               LR
  103 00000008         
  104 00000008         OS_CPU_SR_Restore
  105 00000008 F380 8810       MSR              PRIMASK, R0
  106 0000000C 4770            BX               LR
  107 0000000E         
  108 0000000E         ;PAGE
  109 0000000E         ;*******************************************************
                       *************************************************
  110 0000000E         ;                                         START MULTITAS
                       KING
  111 0000000E         ;                                      void OSStartHighR
                       dy(void)
  112 0000000E         ;
  113 0000000E         ; Note(s) : 1) This function triggers a PendSV exception
                        (essentially, causes a context switch) to cause
  114 0000000E         ;              the first task to start.
  115 0000000E         ;
  116 0000000E         ;           2) OSStartHighRdy() MUST:
  117 0000000E         ;              a) Setup PendSV exception priority to low
                       est;
  118 0000000E         ;              b) Set initial PSP to 0, to tell context 
                       switcher this is first run;
  119 0000000E         ;              c) Set the main stack to OS_CPU_ExceptStk
                       Base
  120 0000000E         ;              d) Set OSRunning to TRUE;
  121 0000000E         ;              e) Trigger PendSV exception;
  122 0000000E         ;              f) Enable interrupts (tasks will run with
                        interrupts enabled).
  123 0000000E         ;*******************************************************



ARM Macro Assembler    Page 4 


                       *************************************************
  124 0000000E         
  125 0000000E         OSStartHighRdy
  126 0000000E 4822            LDR              R0, =NVIC_SYSPRI14 ; Set the Pe
                                                            ndSV exception prio
                                                            rity
  127 00000010 F04F 01FF       LDR              R1, =NVIC_PENDSV_PRI
  128 00000014 7001            STRB             R1, [R0]
  129 00000016         
  130 00000016 2000            MOVS             R0, #0      ; Set the PSP to 0 
                                                            for initial context
                                                             switch call
  131 00000018 F380 8809       MSR              PSP, R0
  132 0000001C         
  133 0000001C         ;LDR     R0, =OS_CPU_ExceptStkBase                      
                            ; Initialize the MSP to the OS_CPU_ExceptStkBase
  134 0000001C         ;LDR     R1, [R0]
  135 0000001C         ;MSR     MSP, R1    
  136 0000001C         
  137 0000001C 481F            LDR              R0, =OSRunning 
                                                            ; OSRunning = TRUE
  138 0000001E 2101            MOVS             R1, #1
  139 00000020 7001            STRB             R1, [R0]
  140 00000022         
  141 00000022 481F            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  142 00000024 F04F 5180       LDR              R1, =NVIC_PENDSVSET
  143 00000028 6001            STR              R1, [R0]
  144 0000002A         
  145 0000002A B662            CPSIE            I           ; Enable interrupts
                                                             at processor level
                                                            
  146 0000002C         
  147 0000002C         OSStartHang
  148 0000002C E7FE            B                OSStartHang ; Should never get 
                                                            here
  149 0000002E         
  150 0000002E         
  151 0000002E         ;PAGE
  152 0000002E         ;*******************************************************
                       *************************************************
  153 0000002E         ;                       PERFORM A CONTEXT SWITCH (From t
                       ask level) - OSCtxSw()
  154 0000002E         ;
  155 0000002E         ; Note(s) : 1) OSCtxSw() is called when OS wants to perf
                       orm a task context switch.  This function
  156 0000002E         ;              triggers the PendSV exception which is wh
                       ere the real work is done.
  157 0000002E         ;*******************************************************
                       *************************************************
  158 0000002E         
  159 0000002E         OSCtxSw
  160 0000002E 481C            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  161 00000030 F04F 5180       LDR              R1, =NVIC_PENDSVSET



ARM Macro Assembler    Page 5 


  162 00000034 6001            STR              R1, [R0]
  163 00000036 4770            BX               LR
  164 00000038         
  165 00000038         
  166 00000038         ;PAGE
  167 00000038         ;*******************************************************
                       *************************************************
  168 00000038         ;                   PERFORM A CONTEXT SWITCH (From inter
                       rupt level) - OSIntCtxSw()
  169 00000038         ;
  170 00000038         ; Note(s) : 1) OSIntCtxSw() is called by OSIntExit() whe
                       n it determines a context switch is needed as
  171 00000038         ;              the result of an interrupt.  This functio
                       n simply triggers a PendSV exception which will
  172 00000038         ;              be handled when there are no more interru
                       pts active and interrupts are enabled.
  173 00000038         ;*******************************************************
                       *************************************************
  174 00000038         
  175 00000038         OSIntCtxSw
  176 00000038 4819            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  177 0000003A F04F 5180       LDR              R1, =NVIC_PENDSVSET
  178 0000003E 6001            STR              R1, [R0]
  179 00000040 4770            BX               LR
  180 00000042         
  181 00000042         
  182 00000042         ;PAGE
  183 00000042         ;*******************************************************
                       *************************************************
  184 00000042         ;                                       HANDLE PendSV EX
                       CEPTION
  185 00000042         ;                                   void OS_CPU_PendSVHa
                       ndler(void)
  186 00000042         ;
  187 00000042         ; Note(s) : 1) PendSV is used to cause a context switch.
                         This is a recommended method for performing
  188 00000042         ;              context switches with Cortex-M3.  This is
                        because the Cortex-M3 auto-saves half of the
  189 00000042         ;              processor context on any exception, and r
                       estores same on return from exception.  So only
  190 00000042         ;              saving of R4-R11 is required and fixing u
                       p the stack pointers.  Using the PendSV exception
  191 00000042         ;              this way means that context saving and re
                       storing is identical whether it is initiated from
  192 00000042         ;              a thread or occurs due to an interrupt or
                        exception.
  193 00000042         ;
  194 00000042         ;           2) Pseudo-code is:
  195 00000042         ;              a) Get the process SP, if 0 then skip (go
                       to d) the saving part (first context switch);
  196 00000042         ;              b) Save remaining regs r4-r11 on process 
                       stack;
  197 00000042         ;              c) Save the process SP in its TCB, OSTCBC
                       ur->OSTCBStkPtr = SP;
  198 00000042         ;              d) Call OSTaskSwHook();
  199 00000042         ;              e) Get current high priority, OSPrioCur =



ARM Macro Assembler    Page 6 


                        OSPrioHighRdy;
  200 00000042         ;              f) Get current ready thread TCB, OSTCBCur
                        = OSTCBHighRdy;
  201 00000042         ;              g) Get new process SP from TCB, SP = OSTC
                       BHighRdy->OSTCBStkPtr;
  202 00000042         ;              h) Restore R4-R11 from new process stack;
                       
  203 00000042         ;              i) Perform exception return which will re
                       store remaining context.
  204 00000042         ;
  205 00000042         ;           3) On entry into PendSV handler:
  206 00000042         ;              a) The following have been saved on the p
                       rocess stack (by processor):
  207 00000042         ;                 xPSR, PC, LR, R12, R0-R3
  208 00000042         ;              b) Processor mode is switched to Handler 
                       mode (from Thread mode)
  209 00000042         ;              c) Stack is Main stack (switched from Pro
                       cess stack)
  210 00000042         ;              d) OSTCBCur      points to the OS_TCB of 
                       the task to suspend
  211 00000042         ;                 OSTCBHighRdy  points to the OS_TCB of 
                       the task to resume
  212 00000042         ;
  213 00000042         ;           4) Since PendSV is set to lowest priority in
                        the system (by OSStartHighRdy() above), we
  214 00000042         ;              know that it will only be run when no oth
                       er exception or interrupt is active, and
  215 00000042         ;              therefore safe to assume that context bei
                       ng switched out was using the process stack (PSP).
  216 00000042         ;*******************************************************
                       *************************************************
  217 00000042         
  218 00000042         PendSV_Handler
  219 00000042 B672            CPSID            I           ; Prevent interrupt
                                                            ion during context 
                                                            switch
  220 00000044 F3EF 8009       MRS              R0, PSP     ; PSP is process st
                                                            ack pointer
  221 00000048 B140            CBZ              R0, PendSV_Handler_nosave ; Ski
                                                            p register save the
                                                             first time
  222 0000004A         
  223 0000004A         
  224 0000004A         ;if enable the FPU 
  225 0000004A 3840            SUBS             R0, R0, #0X40
  226 0000004C EC80 8A10       VSTM             R0, {S16-S31}
  227 00000050         
  228 00000050         
  229 00000050 3820            SUBS             R0, R0, #0x20 ; Save remaining 
                                                            regs r4-11 on proce
                                                            ss stack
  230 00000052 E880 0FF0       STM              R0, {R4-R11}
  231 00000056         
  232 00000056 4913            LDR              R1, =OSTCBCur ; OSTCBCur->OSTCB
                                                            StkPtr = SP;
  233 00000058 6809            LDR              R1, [R1]
  234 0000005A 6008            STR              R0, [R1]    ; R0 is SP of proce
                                                            ss being switched o
                                                            ut



ARM Macro Assembler    Page 7 


  235 0000005C         
  236 0000005C         ; At this point, entire context of process has been save
                       d
  237 0000005C         PendSV_Handler_nosave
  238 0000005C B500            PUSH             {R14}       ; Save LR exc_retur
                                                            n value
  239 0000005E 4812            LDR              R0, =OSTaskSwHook 
                                                            ; OSTaskSwHook();
  240 00000060 4780            BLX              R0
  241 00000062 F85D EB04       POP              {R14}
  242 00000066         
  243 00000066 4811            LDR              R0, =OSPrioCur ; OSPrioCur = OS
                                                            PrioHighRdy;
  244 00000068 4911            LDR              R1, =OSPrioHighRdy
  245 0000006A 780A            LDRB             R2, [R1]
  246 0000006C 7002            STRB             R2, [R0]
  247 0000006E         
  248 0000006E 480D            LDR              R0, =OSTCBCur ; OSTCBCur  = OST
                                                            CBHighRdy;
  249 00000070 4910            LDR              R1, =OSTCBHighRdy
  250 00000072 680A            LDR              R2, [R1]
  251 00000074 6002            STR              R2, [R0]
  252 00000076         
  253 00000076 6810            LDR              R0, [R2]    ; R0 is new process
                                                             SP; SP = OSTCBHigh
                                                            Rdy->OSTCBStkPtr;
  254 00000078 E890 0FF0       LDM              R0, {R4-R11} ; Restore r4-11 fr
                                                            om new process stac
                                                            k
  255 0000007C 3020            ADDS             R0, R0, #0x20
  256 0000007E         
  257 0000007E         ;if enable FPU 
  258 0000007E EC90 8A10       VLDM             R0, {S16-S31}
  259 00000082 3040            ADDS             R0, R0, #0X40
  260 00000084         
  261 00000084         
  262 00000084 F380 8809       MSR              PSP, R0     ; Load PSP with new
                                                             process SP
  263 00000088 F04E 0E04       ORR              LR, LR, #0x04 ; Ensure exceptio
                                                            n return uses proce
                                                            ss stack
  264 0000008C B662            CPSIE            I
  265 0000008E 4770            BX               LR          ; Exception return 
                                                            will restore remain
                                                            ing context
  266 00000090         
  267 00000090         
  268 00000090         CPU_IntDis
  269 00000090 B672            CPSID            I
  270 00000092 4770            BX               LR
  271 00000094         
  272 00000094         
  273 00000094         CPU_IntEn
  274 00000094 B662            CPSIE            I
  275 00000096 4770            BX               LR
  276 00000098         
  277 00000098                 END
              E000ED22 
              00000000 



ARM Macro Assembler    Page 8 


              E000ED04 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\obj\os_cpu_a.d -o.\obj\os_cpu_a.o -I.\RTE\_ACTION -ID:\Keil_v
5\ARM\PACK\Keil\STM32F4xx_DFP\2.11.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include 
-ID:\Keil_v5\ARM\CMSIS\Include --predefine="__UVISION_VERSION SETA 523" --prede
fine="STM32F405xx SETA 1" --list=.\list\os_cpu_a.lst ..\uCOS-ii\Port\os_cpu_a.a
sm



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 62 in file ..\uCOS-ii\Port\os_cpu_a.asm
   Uses
      None
Comment: .text unused
CPU_IntDis 00000090

Symbol: CPU_IntDis
   Definitions
      At line 268 in file ..\uCOS-ii\Port\os_cpu_a.asm
   Uses
      At line 45 in file ..\uCOS-ii\Port\os_cpu_a.asm
Comment: CPU_IntDis used once
CPU_IntEn 00000094

Symbol: CPU_IntEn
   Definitions
      At line 273 in file ..\uCOS-ii\Port\os_cpu_a.asm
   Uses
      At line 46 in file ..\uCOS-ii\Port\os_cpu_a.asm
Comment: CPU_IntEn used once
OSCtxSw 0000002E

Symbol: OSCtxSw
   Definitions
      At line 159 in file ..\uCOS-ii\Port\os_cpu_a.asm
   Uses
      At line 42 in file ..\uCOS-ii\Port\os_cpu_a.asm
Comment: OSCtxSw used once
OSIntCtxSw 00000038

Symbol: OSIntCtxSw
   Definitions
      At line 175 in file ..\uCOS-ii\Port\os_cpu_a.asm
   Uses
      At line 43 in file ..\uCOS-ii\Port\os_cpu_a.asm
Comment: OSIntCtxSw used once
OSStartHang 0000002C

Symbol: OSStartHang
   Definitions
      At line 147 in file ..\uCOS-ii\Port\os_cpu_a.asm
   Uses
      At line 148 in file ..\uCOS-ii\Port\os_cpu_a.asm
Comment: OSStartHang used once
OSStartHighRdy 0000000E

Symbol: OSStartHighRdy
   Definitions
      At line 125 in file ..\uCOS-ii\Port\os_cpu_a.asm
   Uses
      At line 41 in file ..\uCOS-ii\Port\os_cpu_a.asm
Comment: OSStartHighRdy used once
OS_CPU_SR_Restore 00000008

Symbol: OS_CPU_SR_Restore



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 104 in file ..\uCOS-ii\Port\os_cpu_a.asm
   Uses
      At line 40 in file ..\uCOS-ii\Port\os_cpu_a.asm
Comment: OS_CPU_SR_Restore used once
OS_CPU_SR_Save 00000000

Symbol: OS_CPU_SR_Save
   Definitions
      At line 99 in file ..\uCOS-ii\Port\os_cpu_a.asm
   Uses
      At line 39 in file ..\uCOS-ii\Port\os_cpu_a.asm
Comment: OS_CPU_SR_Save used once
PendSV_Handler 00000042

Symbol: PendSV_Handler
   Definitions
      At line 218 in file ..\uCOS-ii\Port\os_cpu_a.asm
   Uses
      At line 44 in file ..\uCOS-ii\Port\os_cpu_a.asm
Comment: PendSV_Handler used once
PendSV_Handler_nosave 0000005C

Symbol: PendSV_Handler_nosave
   Definitions
      At line 237 in file ..\uCOS-ii\Port\os_cpu_a.asm
   Uses
      At line 221 in file ..\uCOS-ii\Port\os_cpu_a.asm
Comment: PendSV_Handler_nosave used once
11 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 52 in file ..\uCOS-ii\Port\os_cpu_a.asm
   Uses
      At line 141 in file ..\uCOS-ii\Port\os_cpu_a.asm
      At line 160 in file ..\uCOS-ii\Port\os_cpu_a.asm
      At line 176 in file ..\uCOS-ii\Port\os_cpu_a.asm

NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 55 in file ..\uCOS-ii\Port\os_cpu_a.asm
   Uses
      At line 142 in file ..\uCOS-ii\Port\os_cpu_a.asm
      At line 161 in file ..\uCOS-ii\Port\os_cpu_a.asm
      At line 177 in file ..\uCOS-ii\Port\os_cpu_a.asm

NVIC_PENDSV_PRI 000000FF

Symbol: NVIC_PENDSV_PRI
   Definitions
      At line 54 in file ..\uCOS-ii\Port\os_cpu_a.asm
   Uses
      At line 127 in file ..\uCOS-ii\Port\os_cpu_a.asm
Comment: NVIC_PENDSV_PRI used once
NVIC_SYSPRI14 E000ED22

Symbol: NVIC_SYSPRI14
   Definitions
      At line 53 in file ..\uCOS-ii\Port\os_cpu_a.asm
   Uses
      At line 126 in file ..\uCOS-ii\Port\os_cpu_a.asm
Comment: NVIC_SYSPRI14 used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

OSIntExit 00000000

Symbol: OSIntExit
   Definitions
      At line 35 in file ..\uCOS-ii\Port\os_cpu_a.asm
   Uses
      None
Comment: OSIntExit unused
OSPrioCur 00000000

Symbol: OSPrioCur
   Definitions
      At line 31 in file ..\uCOS-ii\Port\os_cpu_a.asm
   Uses
      At line 243 in file ..\uCOS-ii\Port\os_cpu_a.asm
Comment: OSPrioCur used once
OSPrioHighRdy 00000000

Symbol: OSPrioHighRdy
   Definitions
      At line 32 in file ..\uCOS-ii\Port\os_cpu_a.asm
   Uses
      At line 244 in file ..\uCOS-ii\Port\os_cpu_a.asm
Comment: OSPrioHighRdy used once
OSRunning 00000000

Symbol: OSRunning
   Definitions
      At line 30 in file ..\uCOS-ii\Port\os_cpu_a.asm
   Uses
      At line 137 in file ..\uCOS-ii\Port\os_cpu_a.asm
Comment: OSRunning used once
OSTCBCur 00000000

Symbol: OSTCBCur
   Definitions
      At line 33 in file ..\uCOS-ii\Port\os_cpu_a.asm
   Uses
      At line 232 in file ..\uCOS-ii\Port\os_cpu_a.asm
      At line 248 in file ..\uCOS-ii\Port\os_cpu_a.asm

OSTCBHighRdy 00000000

Symbol: OSTCBHighRdy
   Definitions
      At line 34 in file ..\uCOS-ii\Port\os_cpu_a.asm
   Uses
      At line 249 in file ..\uCOS-ii\Port\os_cpu_a.asm
Comment: OSTCBHighRdy used once
OSTaskSwHook 00000000

Symbol: OSTaskSwHook
   Definitions
      At line 36 in file ..\uCOS-ii\Port\os_cpu_a.asm
   Uses
      At line 239 in file ..\uCOS-ii\Port\os_cpu_a.asm
Comment: OSTaskSwHook used once
OS_CPU_ExceptStkBase 00000000




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

Symbol: OS_CPU_ExceptStkBase
   Definitions
      At line 37 in file ..\uCOS-ii\Port\os_cpu_a.asm
   Uses
      None
Comment: OS_CPU_ExceptStkBase unused
8 symbols
358 symbols in table
